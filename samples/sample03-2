#include <bits/stdc++.h>
 
using namespace std;
 
#define fi first
#define se second
#define mp make_pair
#define pb push_back
#define all(a) (a).begin(), (a).end()
using ll = long long;
using ull = unsigned long long;
using pii = pair<int, int>;
using pil = pair<int, ll>;
using pli = pair<ll, int>;
using pll = pair<ll, ll>;
using ld = long double;
using dbl = double;
template<typename T1, typename T2> bool chkmin(T1 &x, T2 y) { return y < x ? (x = y, true) : false; }
template<typename T1, typename T2> bool chkmax(T1 &x, T2 y) { return y > x ? (x = y, true) : false; }
void debug_out()
{
    cerr << endl;
}
template<typename T1, typename... T2> void debug_out(T1 A, T2... B)
{
    cerr << ' ' << A;
    debug_out(B...);
}
#ifdef DEBUG
    #define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
    #define debug(...) 1337
#endif
 
const int INF32 = 1e9;
 
namespace treap
{
    mt19937 rng(time(0));
    struct node
    {
        int x, y;
        int mx, sz;
        ll sum;
        node *l, *r;
 
        node() {}
        node(int _x): x(_x), y(rng()), sz(1), mx(_x), sum(_x), l(0), r(0) {}
    };
 
    int priority(node *t)
    {
        return t->y;//return (ll)t * 16444;
    }
 
    ll sum(node *t)
    {
        return t ? t->sum : 0;
    }
 
    int mx(node *t)
    {
        return t ? t->mx : -INF32;
    }
 
    int sz(node *t)
    {
        return t ? t->sz : 0;
    }
 
    void upd(node *&t)
    {
        if (t)
        {
            t->mx = max(t->x, max(mx(t->l), mx(t->r)));
            t->sum = t->x + sum(t->l) + sum(t->r);
            t->sz = 1 + sz(t->l) + sz(t->r);
        }
    }
 
    node* merge(node* a, node* b)
    {
        if (!a) return b;
        if (!b) return a;
        if (priority(a) > priority(b))
        {
            a->r = merge(a->r, b);
            upd(a);
            return a;
        }
        else
        {
            b->l = merge(a, b->l);
            upd(b);
            return b;
        }
    }
    
    pair<node*, node*> split_sz(node *t, int k)
    {
        if (!t || !k)
            return {0, t};
        if (k == t->sz)
            return {t, 0};
        int lc = sz(t->l);
        if (lc + 1 <= k)
        {
            auto p = split_sz(t->r, k - lc - 1);
            t->r = p.fi;
            upd(t);
            return {t, p.se};
        }
        else
        {
            auto p = split_sz(t->l, k);
            t->l = p.se;
            upd(t);
            return {p.fi, t};
        }
    }
 
    void chkmod(node *t, int m)
    {
        if (!t || t->mx < m) return;
        t->x %= m;
        chkmod(t->l, m);
        chkmod(t->r, m);
        upd(t);
    }
}
 
signed main()
{
#ifdef DEBUG
    freopen("in", "r", stdin);
#endif
    ios::sync_with_stdio(0);
    cin.tie(0);
 
    int n, m;
    cin >> n >> m;
    treap::node* T = 0;
    while (n--)
    {
        int x;
        cin >> x;
        T = treap::merge(T, new treap::node(x));
    }
    while (m--)
    {
        int tp;
        cin >> tp;
        if (tp == 1)
        {
            int l, r;
            cin >> l >> r;
            --l;
            --r;
            auto p = split_sz(T, l);
            auto p1 = split_sz(p.se, r - l + 1);
            auto L = p.fi;
            auto M = p1.fi;
            auto R = p1.se;
            cout << treap::sum(M) << '\n';
            T = treap::merge(L, treap::merge(M, R));
        }
        else if (tp == 2)
        {
            int l, r, md;
            cin >> l >> r >> md;
            --l;
            --r;
            auto p = split_sz(T, l);
            auto p1 = split_sz(p.se, r - l + 1);
            auto L = p.fi;
            auto M = p1.fi;
            auto R = p1.se;
            treap::chkmod(M, md);
            T = treap::merge(L, treap::merge(M, R));
        }
        else
        {
            int i, x;
            cin >> i >> x;
            --i;
            auto p = split_sz(T, i);
            auto p1 = split_sz(p.se, 1);
            auto L = p.fi;
            auto M = p1.fi;
            auto R = p1.se;
            T = treap::merge(L, treap::merge(new treap::node(x), R));
        }
    }
 
    return 0;
}